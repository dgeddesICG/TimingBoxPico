// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// pianolaClock //
// ------------ //

#define pianolaClock_wrap_target 0
#define pianolaClock_wrap 13
#define pianolaClock_pio_version 0

static const uint16_t pianolaClock_program_instructions[] = {
            //     .wrap_target
    0xe020, //  0: set    x, 0
    0xa0e9, //  1: mov    osr, ~x
    0x6038, //  2: out    x, 24
    0x6060, //  3: out    null, 32
    0xa045, //  4: mov    y, status
    0x0068, //  5: jmp    !y, 8
    0x002c, //  6: jmp    !x, 12
    0x0644, //  7: jmp    x--, 4                 [6]
    0xa0c1, //  8: mov    isr, x
    0x8000, //  9: push   noblock
    0x002d, // 10: jmp    !x, 13
    0x0444, // 11: jmp    x--, 4                 [4]
    0x010d, // 12: jmp    13                     [1]
    0xa042, // 13: nop
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pianolaClock_program = {
    .instructions = pianolaClock_program_instructions,
    .length = 14,
    .origin = -1,
    .pio_version = pianolaClock_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pianolaClock_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pianolaClock_wrap_target, offset + pianolaClock_wrap);
    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 1);
    return c;
}

    static inline void pianolaClock_program_init(PIO pio, uint sm, uint offset, uint32_t clkDivisorFP)
    {
        pio_sm_config config = pianolaClock_program_get_default_config(offset);
        uint16_t clkDivisorINT = (clkDivisorFP >> 8) & 0xFFFF;
        uint8_t clkDivisorFRAC = clkDivisorFP & 0xFF;
        sm_config_set_clkdiv_int_frac8(&config, clkDivisorINT,clkDivisorFRAC);
        pio_sm_init(pio, sm, offset, &config);
    }

#endif

